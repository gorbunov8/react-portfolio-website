{"ast":null,"code":"import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nexport default class ScrollService {\n  /* SINGLETON CLASS INSTANCE */\n\n  /* Lets instantiate the subject BROADCASTERS */\n  //lets have a constructor here and add the scroll event to window\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"ContactMe\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect(); //this method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.\n      // the view port  refers to the part of the document you're viewing which is currently visible in its window\n\n      let elementTop = rec.top;\n      let elemBottom = rec.bottom;\n      /* when the element is Partially Visible */\n\n      let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\n      /* Completely Visible */\n\n      let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\n\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n\n        case \"complete\":\n          return completelyVisible;\n\n        default:\n          return false;\n      }\n    };\n\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || Object.keys(event).length < 1) return;\n\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            //BROADCAST FADE IN EFFECT\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen[\"alreadyRendered\"] = true;\n            break;\n          }\n\n          if (fullyVisible) {\n            // BROADCAST SCREEN NAME\n            ScrollService.currentScreenBroadcaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n\n    /* ADD SCROLL EVENT TO WINDOW */\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\n  }\n  /* SCROLL TO HIRE ME / CONTACT ME SCREEN */\n\n\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadcaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elemBottom","bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","Object","keys","length","screen","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadcaster","screenInView","addEventListener","scrollHandler"],"sources":["D:/DevOps/Coding/react-portfolio-app/react-portfolio-website/client/src/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\r\nimport { Subject } from \"rxjs\";\r\n\r\nexport default class ScrollService {\r\n  /* SINGLETON CLASS INSTANCE */\r\n  static scrollHandler = new ScrollService();\r\n\r\n  /* Lets instantiate the subject BROADCASTERS */\r\n  static currentScreenBroadcaster = new Subject();\r\n  static currentScreenFadeIn = new Subject();\r\n\r\n  //lets have a constructor here and add the scroll event to window\r\n  constructor() {\r\n    /* ADD SCROLL EVENT TO WINDOW */\r\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\r\n  }\r\n\r\n  /* SCROLL TO HIRE ME / CONTACT ME SCREEN */\r\n  scrollToHireMe = () => {\r\n    let contactMeScreen = document.getElementById(\"ContactMe\");\r\n    if (!contactMeScreen) return;\r\n\r\n    contactMeScreen.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n  scrollToHome = () => {\r\n    let homeScreen = document.getElementById(\"Home\");\r\n    if (!homeScreen) return;\r\n\r\n    homeScreen.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  /* CHECK IF ELEMENT IS IN VIEW .this simply means if the document appears fully on the screen or not */\r\n  isElementInView = (elem, type) => {\r\n    let rec = elem.getBoundingClientRect();\r\n    //this method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.\r\n    // the view port  refers to the part of the document you're viewing which is currently visible in its window\r\n    let elementTop = rec.top;\r\n    let elemBottom = rec.bottom;\r\n\r\n    /* when the element is Partially Visible */\r\n    let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\r\n\r\n    /* Completely Visible */\r\n    let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\r\n\r\n    switch (type) {\r\n      case \"partial\":\r\n        return partiallyVisible;\r\n\r\n      case \"complete\":\r\n        return completelyVisible;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  /* CHECK THE SCREEN THATS CURRENTLY UNDER VIEWPORT */\r\n  // which means the screen that is displayed fully\r\n  checkCurrentScreenUnderViewport = (event) => {\r\n    if (!event || Object.keys(event).length < 1) return;\r\n\r\n    for (let screen of TOTAL_SCREENS) {\r\n      let screenFromDOM = document.getElementById(screen.screen_name);\r\n      if (!screenFromDOM) continue;\r\n\r\n      let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\r\n      let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\r\n\r\n      if (fullyVisible || partiallyVisible) {\r\n        if (partiallyVisible && !screen.alreadyRendered) {\r\n          //BROADCAST FADE IN EFFECT\r\n          ScrollService.currentScreenFadeIn.next({\r\n            fadeInScreen: screen.screen_name,\r\n          });\r\n          screen[\"alreadyRendered\"] = true;\r\n          break;\r\n        }\r\n\r\n        if (fullyVisible) {\r\n          // BROADCAST SCREEN NAME\r\n          ScrollService.currentScreenBroadcaster.next({\r\n            screenInView: screen.screen_name,\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,eAAe,MAAMC,aAAN,CAAoB;EACjC;;EAGA;EAIA;EACAC,WAAW,GAAG;IAAA,KAMdC,cANc,GAMG,MAAM;MACrB,IAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAtB;MACA,IAAI,CAACF,eAAL,EAAsB;MAEtBA,eAAe,CAACG,cAAhB,CAA+B;QAAEC,QAAQ,EAAE;MAAZ,CAA/B;IACD,CAXa;;IAAA,KAYdC,YAZc,GAYC,MAAM;MACnB,IAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjB;MACA,IAAI,CAACI,UAAL,EAAiB;MAEjBA,UAAU,CAACH,cAAX,CAA0B;QAAEC,QAAQ,EAAE;MAAZ,CAA1B;IACD,CAjBa;;IAAA,KAoBdG,eApBc,GAoBI,CAACC,IAAD,EAAOC,IAAP,KAAgB;MAChC,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAL,EAAV,CADgC,CAEhC;MACA;;MACA,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;MACA,IAAIC,UAAU,GAAGJ,GAAG,CAACK,MAArB;MAEA;;MACA,IAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAApB,IAAmCJ,UAAU,IAAI,CAAxE;MAEA;;MACA,IAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAd,IAAmBE,UAAU,IAAIG,MAAM,CAACC,WAAhE;;MAEA,QAAQT,IAAR;QACE,KAAK,SAAL;UACE,OAAOO,gBAAP;;QAEF,KAAK,UAAL;UACE,OAAOG,iBAAP;;QAEF;UACE,OAAO,KAAP;MARJ;IAUD,CA3Ca;;IAAA,KA+CdC,+BA/Cc,GA+CqBC,KAAD,IAAW;MAC3C,IAAI,CAACA,KAAD,IAAUC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,GAA4B,CAA1C,EAA6C;;MAE7C,KAAK,IAAIC,MAAT,IAAmB9B,aAAnB,EAAkC;QAChC,IAAI+B,aAAa,GAAGzB,QAAQ,CAACC,cAAT,CAAwBuB,MAAM,CAACE,WAA/B,CAApB;QACA,IAAI,CAACD,aAAL,EAAoB;QAEpB,IAAIE,YAAY,GAAG,KAAKrB,eAAL,CAAqBmB,aAArB,EAAoC,UAApC,CAAnB;QACA,IAAIV,gBAAgB,GAAG,KAAKT,eAAL,CAAqBmB,aAArB,EAAoC,SAApC,CAAvB;;QAEA,IAAIE,YAAY,IAAIZ,gBAApB,EAAsC;UACpC,IAAIA,gBAAgB,IAAI,CAACS,MAAM,CAACI,eAAhC,EAAiD;YAC/C;YACAhC,aAAa,CAACiC,mBAAd,CAAkCC,IAAlC,CAAuC;cACrCC,YAAY,EAAEP,MAAM,CAACE;YADgB,CAAvC;YAGAF,MAAM,CAAC,iBAAD,CAAN,GAA4B,IAA5B;YACA;UACD;;UAED,IAAIG,YAAJ,EAAkB;YAChB;YACA/B,aAAa,CAACoC,wBAAd,CAAuCF,IAAvC,CAA4C;cAC1CG,YAAY,EAAET,MAAM,CAACE;YADqB,CAA5C;YAGA;UACD;QACF;MACF;IACF,CA5Ea;;IACZ;IACAV,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKf,+BAAvC;EACD;EAED;;;AAdiC;AAAdvB,a,CAEZuC,a,GAAgB,IAAIvC,aAAJ,E;AAFJA,a,CAKZoC,wB,GAA2B,IAAIrC,OAAJ,E;AALfC,a,CAMZiC,mB,GAAsB,IAAIlC,OAAJ,E"},"metadata":{},"sourceType":"module"}