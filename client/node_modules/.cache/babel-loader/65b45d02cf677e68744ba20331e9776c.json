{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { innerFrom } from '../observable/from';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function groupBy(keySelector, elementOrOptions, duration, connector) {\n  return operate(function (source, subscriber) {\n    var element;\n\n    if (!elementOrOptions || typeof elementOrOptions === 'function') {\n      element = elementOrOptions;\n    } else {\n      duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector;\n    }\n\n    var groups = new Map();\n\n    var notify = function (cb) {\n      groups.forEach(cb);\n      cb(subscriber);\n    };\n\n    var handleError = function (err) {\n      return notify(function (consumer) {\n        return consumer.error(err);\n      });\n    };\n\n    var groupBySourceSubscriber = new GroupBySubscriber(subscriber, function (value) {\n      try {\n        var key_1 = keySelector(value);\n        var group_1 = groups.get(key_1);\n\n        if (!group_1) {\n          groups.set(key_1, group_1 = connector ? connector() : new Subject());\n          var grouped = createGroupedObservable(key_1, group_1);\n          subscriber.next(grouped);\n\n          if (duration) {\n            var durationSubscriber_1 = new OperatorSubscriber(group_1, function () {\n              group_1.complete();\n              durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();\n            }, undefined, undefined, function () {\n              return groups.delete(key_1);\n            });\n            groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber_1));\n          }\n        }\n\n        group_1.next(element ? element(value) : value);\n      } catch (err) {\n        handleError(err);\n      }\n    }, function () {\n      return notify(function (consumer) {\n        return consumer.complete();\n      });\n    }, handleError, function () {\n      return groups.clear();\n    });\n    source.subscribe(groupBySourceSubscriber);\n\n    function createGroupedObservable(key, groupSubject) {\n      var result = new Observable(function (groupSubscriber) {\n        groupBySourceSubscriber.activeGroups++;\n        var innerSub = groupSubject.subscribe(groupSubscriber);\n        return function () {\n          innerSub.unsubscribe();\n          --groupBySourceSubscriber.activeGroups === 0 && groupBySourceSubscriber.teardownAttempted && groupBySourceSubscriber.unsubscribe();\n        };\n      });\n      result.key = key;\n      return result;\n    }\n  });\n}\n\nvar GroupBySubscriber = function (_super) {\n  __extends(GroupBySubscriber, _super);\n\n  function GroupBySubscriber() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.activeGroups = 0;\n    _this.teardownAttempted = false;\n    return _this;\n  }\n\n  GroupBySubscriber.prototype.unsubscribe = function () {\n    this.teardownAttempted = true;\n    this.activeGroups === 0 && _super.prototype.unsubscribe.call(this);\n  };\n\n  return GroupBySubscriber;\n}(OperatorSubscriber);","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAgJA,OAAM,SAAUC,OAAV,CACJC,WADI,EAEJC,gBAFI,EAGJC,QAHI,EAIJC,SAJI,EAI8B;EAElC,OAAON,OAAO,CAAC,UAACO,MAAD,EAASC,UAAT,EAAmB;IAChC,IAAIC,OAAJ;;IACA,IAAI,CAACL,gBAAD,IAAqB,OAAOA,gBAAP,KAA4B,UAArD,EAAiE;MAC/DK,OAAO,GAAGL,gBAAV;IACD,CAFD,MAEO;MACFC,QAAQ,GAAyBD,gBAAgB,SAAjD,EAAUK,OAAO,GAAgBL,gBAAgB,QAAjD,EAAmBE,SAAS,GAAKF,gBAAgB,UAApD;IACD;;IAGD,IAAMM,MAAM,GAAG,IAAIC,GAAJ,EAAf;;IAGA,IAAMC,MAAM,GAAG,UAACC,EAAD,EAAmC;MAChDH,MAAM,CAACI,OAAP,CAAeD,EAAf;MACAA,EAAE,CAACL,UAAD,CAAF;IACD,CAHD;;IAOA,IAAMO,WAAW,GAAG,UAACC,GAAD,EAAS;MAAK,aAAM,CAAC,UAACC,QAAD,EAAS;QAAK,eAAQ,CAACC,KAAT,CAAeF,GAAf;MAAmB,CAAlC,CAAN;IAAyC,CAA3E;;IASA,IAAMG,uBAAuB,GAAG,IAAIC,iBAAJ,CAC9BZ,UAD8B,EAE9B,UAACa,KAAD,EAAS;MAIP,IAAI;QACF,IAAMC,KAAG,GAAGnB,WAAW,CAACkB,KAAD,CAAvB;QAEA,IAAIE,OAAK,GAAGb,MAAM,CAACc,GAAP,CAAWF,KAAX,CAAZ;;QACA,IAAI,CAACC,OAAL,EAAY;UAEVb,MAAM,CAACe,GAAP,CAAWH,KAAX,EAAiBC,OAAK,GAAGjB,SAAS,GAAGA,SAAS,EAAZ,GAAiB,IAAIP,OAAJ,EAAnD;UAKA,IAAM2B,OAAO,GAAGC,uBAAuB,CAACL,KAAD,EAAMC,OAAN,CAAvC;UACAf,UAAU,CAACoB,IAAX,CAAgBF,OAAhB;;UAEA,IAAIrB,QAAJ,EAAc;YACZ,IAAMwB,oBAAkB,GAAG,IAAI5B,kBAAJ,CAMzBsB,OANyB,EAOzB;cAGEA,OAAM,CAACO,QAAP;cACAD,oBAAkB,SAAlB,wBAAkB,WAAlB,GAAkB,MAAlB,uBAAkB,CAAEE,WAApB;YACD,CAZwB,EAczBC,SAdyB,EAiBzBA,SAjByB,EAmBzB;cAAM,aAAM,CAACC,MAAP,CAAcX,KAAd;YAAkB,CAnBC,CAA3B;YAuBAH,uBAAuB,CAACe,GAAxB,CAA4BpC,SAAS,CAACO,QAAQ,CAACqB,OAAD,CAAT,CAAT,CAA6BS,SAA7B,CAAuCN,oBAAvC,CAA5B;UACD;QACF;;QAGDN,OAAK,CAACK,IAAN,CAAWnB,OAAO,GAAGA,OAAO,CAACY,KAAD,CAAV,GAAoBA,KAAtC;MACD,CA5CD,CA4CE,OAAOL,GAAP,EAAY;QACZD,WAAW,CAACC,GAAD,CAAX;MACD;IACF,CArD6B,EAuD9B;MAAM,aAAM,CAAC,UAACC,QAAD,EAAS;QAAK,eAAQ,CAACa,QAAT;MAAmB,CAAlC,CAAN;IAAyC,CAvDjB,EAyD9Bf,WAzD8B,EA8D9B;MAAM,aAAM,CAACqB,KAAP;IAAc,CA9DU,CAAhC;IAkEA7B,MAAM,CAAC4B,SAAP,CAAiBhB,uBAAjB;;IAOA,SAASQ,uBAAT,CAAiCU,GAAjC,EAAyCC,YAAzC,EAAuE;MACrE,IAAMC,MAAM,GAAQ,IAAI1C,UAAJ,CAAkB,UAAC2C,eAAD,EAAgB;QACpDrB,uBAAuB,CAACsB,YAAxB;QACA,IAAMC,QAAQ,GAAGJ,YAAY,CAACH,SAAb,CAAuBK,eAAvB,CAAjB;QACA,OAAO;UACLE,QAAQ,CAACX,WAAT;UAIA,EAAEZ,uBAAuB,CAACsB,YAA1B,KAA2C,CAA3C,IACEtB,uBAAuB,CAACwB,iBAD1B,IAEExB,uBAAuB,CAACY,WAAxB,EAFF;QAGD,CARD;MASD,CAZmB,CAApB;MAaAQ,MAAM,CAACF,GAAP,GAAaA,GAAb;MACA,OAAOE,MAAP;IACD;EACF,CAtHa,CAAd;AAuHD;;AAOD;EAAmCK;;EAAnC;IAAA;;IAIEC,qBAAe,CAAf;IAIAA,0BAAoB,KAApB;;EASD;;EAPCzB;IACE,KAAKuB,iBAAL,GAAyB,IAAzB;IAIA,KAAKF,YAAL,KAAsB,CAAtB,IAA2BK,iBAAMf,WAAN,CAAiBgB,IAAjB,CAAiB,IAAjB,CAA3B;EACD,CAND;;EAOF;AAAC,CAjBD,CAAmC9C,kBAAnC","names":["Observable","innerFrom","Subject","operate","OperatorSubscriber","groupBy","keySelector","elementOrOptions","duration","connector","source","subscriber","element","groups","Map","notify","cb","forEach","handleError","err","consumer","error","groupBySourceSubscriber","GroupBySubscriber","value","key_1","group_1","get","set","grouped","createGroupedObservable","next","durationSubscriber_1","complete","unsubscribe","undefined","delete","add","subscribe","clear","key","groupSubject","result","groupSubscriber","activeGroups","innerSub","teardownAttempted","__extends","_this","_super","call"],"sourceRoot":"","sources":["../../../../src/internal/operators/groupBy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}